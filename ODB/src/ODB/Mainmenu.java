
package ODB;

import java.awt.event.MouseEvent;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.Vector;
import javax.swing.JOptionPane;


public class Mainmenu extends javax.swing.JFrame {

    Vector ordered = new Vector();

    public Mainmenu() {
        initComponents();
        counter();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public String setselectedrow() {
        String productid = productTable.getValueAt(productTable.getSelectedRow(), 0).toString();
        return productid;
    }
    
    public String transactionsetselectedrow() {
        String transactionid = transactionTable.getValueAt(transactionTable.getSelectedRow(), 0).toString();
        return transactionid;
    }

    public void counter() {
        try {
            String sql = "SELECT COUNT(Product) FROM producttable;";
            Statement statement = Database.myConnect("posdatabase").createStatement();
            ResultSet resultset = statement.executeQuery(sql);
            while (resultset.next()){
            String ProductNumber = resultset.getString(1);
            lblCountProducts.setText(ProductNumber);
            }
            resultset.close();
            statement.close();

            sql = "SELECT COUNT(DISTINCT Type) FROM producttable;";
            statement = Database.myConnect("posdatabase").createStatement();
            resultset = statement.executeQuery(sql);
            while (resultset.next()){
            String TypeNumber = resultset.getString(1);
            lblCountTypes.setText(TypeNumber);
            }
            resultset.close();
            statement.close();
            
            sql = "SELECT COUNT(DISTINCT Seller) FROM producttable;";
            statement = Database.myConnect("posdatabase").createStatement();
            resultset = statement.executeQuery(sql);
            while (resultset.next()){
            String SellerNumber = resultset.getString(1);
            lblSellers.setText(SellerNumber);
            resultset.close();
            statement.close();
            
            
            sql = "SELECT COUNT(Product) FROM producttable WHERE SellerID =" + getUserID(User);
            statement = Database.myConnect("posdatabase").createStatement();
            resultset = statement.executeQuery(sql);
            while (resultset.next()){
            String ProductNumber = resultset.getString(1);
            lblCountUserProducts.setText(ProductNumber);
            }
            resultset.close();
            statement.close();
            
            
            sql = "SELECT COUNT(DISTINCT Type) FROM producttable WHERE SellerID =" + getUserID(User);
            statement = Database.myConnect("posdatabase").createStatement();
            resultset = statement.executeQuery(sql);
            while (resultset.next()){
            String TypeNumber = resultset.getString(1);
            lblCountUserTypes.setText(TypeNumber);
            }
            resultset.close();
            statement.close();
            
            sql = "SELECT COUNT(DISTINCT TransactionID) FROM transactioncmdtable WHERE BuyerID =" + getUserID(User);
            statement = Database.myConnect("posdatabase").createStatement();
            resultset = statement.executeQuery(sql);
            while (resultset.next()){
            String TransactionsNumber = resultset.getString(1);
            lblTransactionsCount.setText(TransactionsNumber);
            }
            resultset.close();
            statement.close();
            
            }
        } catch (Exception e) {
            /*JOptionPane.showMessageDialog(rootPane,"Failed to get Values");*/
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        pnlBG = new javax.swing.JPanel();
        cmdOut = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        pnlTablebg = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        cmdBuy = new javax.swing.JButton();
        cmdSearch = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        cmdAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        lblTotalname = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblHeader1 = new javax.swing.JLabel();
        lblHeader2 = new javax.swing.JLabel();
        lblHeader3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lblCountProducts = new javax.swing.JLabel();
        lblHeader8 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        lblCountTypes = new javax.swing.JLabel();
        lblHeader10 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        lblSellers = new javax.swing.JLabel();
        lblHeader11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblBigWindowTitle = new javax.swing.JLabel();
        cmdAddNewProduct = new javax.swing.JButton();
        cmdUpdate = new javax.swing.JButton();
        cmdDelete1 = new javax.swing.JButton();
        cmdRefresh = new javax.swing.JButton();
        FieldsPanel = new javax.swing.JPanel();
        txtProductName = new javax.swing.JTextField();
        txtProductType = new javax.swing.JTextField();
        spinStocks = new javax.swing.JSpinner();
        lblType = new javax.swing.JLabel();
        lblRestock = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        cmdCancel = new javax.swing.JButton();
        cmdDone = new javax.swing.JButton();
        txtPrice = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        lblWindowTitle = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        cmdInventorySearch = new javax.swing.JButton();
        txtInventorySearch = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        lblCountUserProducts = new javax.swing.JLabel();
        lblHeader13 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        lblCountUserTypes = new javax.swing.JLabel();
        lblHeader15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        lblBigWindowTitle1 = new javax.swing.JLabel();
        cmdViewTransaction = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        lblTransactionsCount = new javax.swing.JLabel();
        lblHeader17 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        lblThanks1 = new javax.swing.JLabel();
        lblTransactionID = new javax.swing.JLabel();
        lblBuyer = new javax.swing.JLabel();
        lblContactNo = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblReceipt = new javax.swing.JTable();
        lblTotalOR = new javax.swing.JLabel();
        lblWelcome = new javax.swing.JLabel();
        lblProgramName = new javax.swing.JLabel();
        cmdSettings = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setUndecorated(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnlBG.setBackground(new java.awt.Color(0, 31, 84));
        pnlBG.setForeground(new java.awt.Color(252, 239, 191));

        cmdOut.setText("Logout");
        cmdOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdOutMouseClicked(evt);
            }
        });
        cmdOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOutActionPerformed(evt);
            }
        });

        jTabbedPane1.setBorder(new javax.swing.border.MatteBorder(null));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(80, 30));

        pnlTablebg.setBackground(new java.awt.Color(18, 130, 162));

        String sql = "SELECT * FROM producttable";
        tblProducts.setBackground(new java.awt.Color(17, 105, 142));
        tblProducts.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        tblProducts.setForeground(new java.awt.Color(255, 255, 255));
        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Stock"})
    );
    try{
        DefaultTableModel defaulttable= (DefaultTableModel) tblProducts.getModel();

        Statement statement = Database.myConnect("posdatabase").createStatement();
        ResultSet resultset = statement.executeQuery(sql);

        while(resultset.next()){
            Vector vector = new Vector();
            vector.add(resultset.getString(1));
            vector.add(resultset.getString(2));
            vector.add(resultset.getString(3));
            vector.add(resultset.getString(4));
            vector.add(resultset.getString(5));
            vector.add(resultset.getString(6));
            vector.add(resultset.getString(7));
            defaulttable.addRow(vector);
            tblProducts.setDefaultEditor(Object.class, null);
        }
    }
    catch(Exception e){
        JOptionPane.showMessageDialog(this, e);
    }
    tblProducts.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    tblProducts.setSelectionBackground(new java.awt.Color(22, 199, 154));
    tblProducts.setSelectionForeground(new java.awt.Color(25, 69, 107));
    tblProducts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    tblProducts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    tblProducts.setShowGrid(true);
    tblProducts.getTableHeader().setReorderingAllowed(false);
    tblProducts.setUpdateSelectionOnSort(false);
    jScrollPane2.setViewportView(tblProducts);

    cmdBuy.setBackground(new java.awt.Color(22, 199, 154));
    cmdBuy.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdBuy.setForeground(new java.awt.Color(17, 105, 142));
    cmdBuy.setText("BUY");
    cmdBuy.setPreferredSize(new java.awt.Dimension(80, 30));
    cmdBuy.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdBuyActionPerformed(evt);
        }
    });

    cmdSearch.setBackground(new java.awt.Color(22, 199, 154));
    cmdSearch.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdSearch.setForeground(new java.awt.Color(17, 105, 142));
    cmdSearch.setText("Search");
    cmdSearch.setPreferredSize(new java.awt.Dimension(80, 30));
    cmdSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdSearchActionPerformed(evt);
        }
    });

    cmdDelete.setBackground(new java.awt.Color(22, 199, 154));
    cmdDelete.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdDelete.setForeground(new java.awt.Color(17, 105, 142));
    cmdDelete.setText("DELETE");
    cmdDelete.setPreferredSize(new java.awt.Dimension(80, 30));
    cmdDelete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdDeleteActionPerformed(evt);
        }
    });

    txtSearch.setBackground(new java.awt.Color(22, 199, 154));
    txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    txtSearch.setForeground(new java.awt.Color(17, 105, 142));
    txtSearch.setText("Search item......");
    txtSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtSearchActionPerformed(evt);
        }
    });
    txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtSearchKeyPressed(evt);
        }
    });

    cmdAdd.setBackground(new java.awt.Color(22, 199, 154));
    cmdAdd.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdAdd.setForeground(new java.awt.Color(17, 105, 142));
    cmdAdd.setText("ADD");
    cmdAdd.setPreferredSize(new java.awt.Dimension(80, 30));
    cmdAdd.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdAddActionPerformed(evt);
        }
    });

    tblOrders.setBackground(new java.awt.Color(17, 105, 142));
    tblOrders.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
    tblOrders.setForeground(new java.awt.Color(255, 255, 255));
    tblOrders.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Quantity", "Subtotal"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblOrders.setSelectionBackground(new java.awt.Color(22, 199, 154));
    tblOrders.setSelectionForeground(new java.awt.Color(25, 69, 107));
    tblOrders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    tblOrders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    tblOrders.getTableHeader().setReorderingAllowed(false);
    jScrollPane1.setViewportView(tblOrders);
    if (tblOrders.getColumnModel().getColumnCount() > 0) {
        tblOrders.getColumnModel().getColumn(0).setResizable(false);
        tblOrders.getColumnModel().getColumn(1).setResizable(false);
        tblOrders.getColumnModel().getColumn(2).setResizable(false);
        tblOrders.getColumnModel().getColumn(3).setResizable(false);
        tblOrders.getColumnModel().getColumn(4).setResizable(false);
        tblOrders.getColumnModel().getColumn(5).setResizable(false);
        tblOrders.getColumnModel().getColumn(6).setResizable(false);
        tblOrders.getColumnModel().getColumn(7).setResizable(false);
    }

    lblTotalname.setBackground(new java.awt.Color(22, 199, 154));
    lblTotalname.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    lblTotalname.setForeground(new java.awt.Color(255, 255, 255));
    lblTotalname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblTotalname.setText("Total:");

    lblTotal.setBackground(new java.awt.Color(22, 199, 154));
    lblTotal.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    lblTotal.setForeground(new java.awt.Color(255, 255, 255));
    lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    lblTotal.setText("0");

    lblHeader1.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblHeader1.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader1.setText("Bakal na kamo, Presyong suki lang ni!");

    lblHeader2.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader2.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader2.setText("Products:");

    lblHeader3.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader3.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader3.setText("Orders:");

    jPanel5.setBackground(new java.awt.Color(51, 51, 51));

    lblCountProducts.setBackground(new java.awt.Color(0, 31, 84));
    lblCountProducts.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblCountProducts.setForeground(new java.awt.Color(254, 252, 251));
    lblCountProducts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblCountProducts.setText("100");

    lblHeader8.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader8.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader8.setText("Products");

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lblCountProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblHeader8, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(lblCountProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblHeader8)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel7.setBackground(new java.awt.Color(51, 51, 51));

    lblCountTypes.setBackground(new java.awt.Color(0, 31, 84));
    lblCountTypes.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblCountTypes.setForeground(new java.awt.Color(254, 252, 251));
    lblCountTypes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblCountTypes.setText("100");

    lblHeader10.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader10.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader10.setText("Product Types");

    javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
    jPanel7.setLayout(jPanel7Layout);
    jPanel7Layout.setHorizontalGroup(
        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lblCountTypes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel7Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblHeader10, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel7Layout.setVerticalGroup(
        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel7Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblCountTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblHeader10)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel8.setBackground(new java.awt.Color(51, 51, 51));

    lblSellers.setBackground(new java.awt.Color(0, 31, 84));
    lblSellers.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblSellers.setForeground(new java.awt.Color(254, 252, 251));
    lblSellers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblSellers.setText("100");

    lblHeader11.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader11.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader11.setText("Sellers");

    javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
    jPanel8.setLayout(jPanel8Layout);
    jPanel8Layout.setHorizontalGroup(
        jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lblSellers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel8Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblHeader11, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel8Layout.setVerticalGroup(
        jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel8Layout.createSequentialGroup()
            .addGap(12, 12, 12)
            .addComponent(lblSellers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lblHeader11)
            .addGap(5, 5, 5))
    );

    javax.swing.GroupLayout pnlTablebgLayout = new javax.swing.GroupLayout(pnlTablebg);
    pnlTablebg.setLayout(pnlTablebgLayout);
    pnlTablebgLayout.setHorizontalGroup(
        pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlTablebgLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTablebgLayout.createSequentialGroup()
                    .addComponent(txtSearch)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(cmdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(lblHeader1)
                .addComponent(lblHeader2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(pnlTablebgLayout.createSequentialGroup()
                    .addGap(0, 14, Short.MAX_VALUE)
                    .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblHeader3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlTablebgLayout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlTablebgLayout.createSequentialGroup()
                            .addComponent(lblTotalname, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(3, 3, 3)
                            .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(pnlTablebgLayout.createSequentialGroup()
                    .addComponent(cmdAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(cmdDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(cmdBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlTablebgLayout.setVerticalGroup(
        pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlTablebgLayout.createSequentialGroup()
            .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(pnlTablebgLayout.createSequentialGroup()
                    .addComponent(lblHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblHeader2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblHeader3))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlTablebgLayout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTotal)
                        .addComponent(lblTotalname))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(pnlTablebgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmdAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    cmdSearch.getAccessibleContext().setAccessibleDescription("");
    lblTotal.getAccessibleContext().setAccessibleDescription("");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(pnlTablebg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(pnlTablebg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 21, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Buy Products", jPanel2);

    jPanel3.setBackground(new java.awt.Color(17, 105, 142));

    lblBigWindowTitle.setBackground(new java.awt.Color(22, 199, 154));
    lblBigWindowTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblBigWindowTitle.setForeground(new java.awt.Color(248, 241, 241));
    lblBigWindowTitle.setText("Mang-Imbentaryo kita!");

    cmdAddNewProduct.setBackground(new java.awt.Color(22, 199, 154));
    cmdAddNewProduct.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdAddNewProduct.setForeground(new java.awt.Color(17, 105, 142));
    cmdAddNewProduct.setText("ADD");
    cmdAddNewProduct.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdAddNewProductMouseClicked(evt);
        }
    });
    cmdAddNewProduct.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdAddNewProductActionPerformed(evt);
        }
    });

    cmdUpdate.setBackground(new java.awt.Color(22, 199, 154));
    cmdUpdate.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdUpdate.setForeground(new java.awt.Color(17, 105, 142));
    cmdUpdate.setText("UPDATE");
    cmdUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdUpdateMouseClicked(evt);
        }
    });
    cmdUpdate.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdUpdateActionPerformed(evt);
        }
    });

    cmdDelete1.setBackground(new java.awt.Color(22, 199, 154));
    cmdDelete1.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdDelete1.setForeground(new java.awt.Color(17, 105, 142));
    cmdDelete1.setText("DELETE");
    cmdDelete1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdDelete1MouseClicked(evt);
        }
    });
    cmdDelete1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdDelete1ActionPerformed(evt);
        }
    });

    cmdRefresh.setBackground(new java.awt.Color(22, 199, 154));
    cmdRefresh.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdRefresh.setForeground(new java.awt.Color(17, 105, 142));
    cmdRefresh.setText("REFRESH");
    cmdRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdRefreshMouseClicked(evt);
        }
    });
    cmdRefresh.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdRefreshActionPerformed(evt);
        }
    });

    FieldsPanel.setVisible(false);

    txtProductName.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtProductNameActionPerformed(evt);
        }
    });

    lblType.setText("Product Type:");

    lblRestock.setText("Stocks");

    lblProduct.setText("Product Name:");

    cmdCancel.setBackground(new java.awt.Color(22, 199, 154));
    cmdCancel.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdCancel.setForeground(new java.awt.Color(17, 105, 142));
    cmdCancel.setText("CANCEL");
    cmdCancel.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdCancelMouseClicked(evt);
        }
    });
    cmdCancel.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdCancelActionPerformed(evt);
        }
    });

    cmdDone.setBackground(new java.awt.Color(22, 199, 154));
    cmdDone.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdDone.setForeground(new java.awt.Color(17, 105, 142));
    cmdDone.setText("DONE");
    cmdDone.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdDoneMouseClicked(evt);
        }
    });
    cmdDone.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdDoneActionPerformed(evt);
        }
    });

    txtPrice.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtPriceActionPerformed(evt);
        }
    });

    lblPrice.setText("Price");

    javax.swing.GroupLayout FieldsPanelLayout = new javax.swing.GroupLayout(FieldsPanel);
    FieldsPanel.setLayout(FieldsPanelLayout);
    FieldsPanelLayout.setHorizontalGroup(
        FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(FieldsPanelLayout.createSequentialGroup()
            .addGap(60, 60, 60)
            .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(FieldsPanelLayout.createSequentialGroup()
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(6, 6, 6)
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(spinStocks, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRestock, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 16, Short.MAX_VALUE))
                .addGroup(FieldsPanelLayout.createSequentialGroup()
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPrice)
                        .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
            .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(cmdDone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmdCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(47, 47, 47))
    );
    FieldsPanelLayout.setVerticalGroup(
        FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(FieldsPanelLayout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(FieldsPanelLayout.createSequentialGroup()
                    .addComponent(cmdDone, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(FieldsPanelLayout.createSequentialGroup()
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblPrice)
                        .addComponent(lblProduct))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblType)
                        .addComponent(lblRestock, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(FieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinStocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    lblWindowTitle.setBackground(new java.awt.Color(22, 199, 154));
    lblWindowTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblWindowTitle.setForeground(new java.awt.Color(254, 252, 251));
    lblWindowTitle.setText("Inventory  ");

    jScrollPane3.setBackground(new java.awt.Color(17, 105, 142));
    jScrollPane3.setForeground(new java.awt.Color(248, 241, 241));
    jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jScrollPane3.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

    productTable.setBackground(new java.awt.Color(17, 105, 142));
    productTable.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    productTable.setForeground(new java.awt.Color(248, 241, 241));
    productTable.setModel(new javax.swing.table.DefaultTableModel(
        null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Stock"}
    ) {public boolean isCellEditable(int row, int column){return false;}});
    try{
        DefaultTableModel defaulttable= (DefaultTableModel) productTable.getModel();
        String UserID = getUserID(User);
        sql = "SELECT * FROM producttable WHERE SellerID = " + UserID;
        Statement statement = Database.myConnect("posdatabase").createStatement();
        ResultSet resultset = statement.executeQuery(sql);

        while(resultset.next()){
            Vector vector = new Vector();
            vector.add(resultset.getString(1));
            vector.add(resultset.getString(2));
            vector.add(resultset.getString(3));
            vector.add(resultset.getString(4));
            vector.add(resultset.getString(5));
            vector.add(resultset.getString(6));
            vector.add(resultset.getString(7));
            defaulttable.addRow(vector);
            productTable.setDefaultEditor(Object.class, null);
        }
    }
    catch(Exception e){
        JOptionPane.showMessageDialog(this, e);
    }
    productTable.setGridColor(new java.awt.Color(25, 69, 107));
    productTable.setSelectionBackground(new java.awt.Color(22, 199, 154));
    productTable.setSelectionForeground(new java.awt.Color(25, 69, 107));
    productTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    productTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    productTable.setShowGrid(true);
    productTable.getTableHeader().setReorderingAllowed(false);
    productTable.setUpdateSelectionOnSort(false);
    productTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            productTableMouseClicked(evt);
        }
    });
    jScrollPane3.setViewportView(productTable);
    productTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    cmdInventorySearch.setBackground(new java.awt.Color(22, 199, 154));
    cmdInventorySearch.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdInventorySearch.setForeground(new java.awt.Color(17, 105, 142));
    cmdInventorySearch.setText("Search");
    cmdInventorySearch.setPreferredSize(new java.awt.Dimension(80, 30));
    cmdInventorySearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdInventorySearchActionPerformed(evt);
        }
    });

    txtInventorySearch.setBackground(new java.awt.Color(22, 199, 154));
    txtInventorySearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    txtInventorySearch.setForeground(new java.awt.Color(17, 105, 142));
    txtInventorySearch.setText("Search item......");
    txtInventorySearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtInventorySearchActionPerformed(evt);
        }
    });
    txtInventorySearch.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            txtInventorySearchKeyPressed(evt);
        }
    });

    jPanel10.setBackground(new java.awt.Color(51, 51, 51));

    lblCountUserProducts.setBackground(new java.awt.Color(0, 31, 84));
    lblCountUserProducts.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblCountUserProducts.setForeground(new java.awt.Color(254, 252, 251));
    lblCountUserProducts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblCountUserProducts.setText("100");

    lblHeader13.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader13.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader13.setText("Products");

    javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
    jPanel10.setLayout(jPanel10Layout);
    jPanel10Layout.setHorizontalGroup(
        jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lblCountUserProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel10Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblHeader13, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel10Layout.setVerticalGroup(
        jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel10Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblCountUserProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(lblHeader13)
            .addContainerGap())
    );

    jPanel12.setBackground(new java.awt.Color(51, 51, 51));

    lblCountUserTypes.setBackground(new java.awt.Color(0, 31, 84));
    lblCountUserTypes.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblCountUserTypes.setForeground(new java.awt.Color(254, 252, 251));
    lblCountUserTypes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblCountUserTypes.setText("100");

    lblHeader15.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader15.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader15.setText("Types");

    javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
    jPanel12.setLayout(jPanel12Layout);
    jPanel12Layout.setHorizontalGroup(
        jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lblCountUserTypes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel12Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblHeader15, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel12Layout.setVerticalGroup(
        jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel12Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblCountUserTypes, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(lblHeader15)
            .addContainerGap())
    );

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(91, 91, 91)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addComponent(cmdUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(12, 12, 12)
                    .addComponent(cmdRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(cmdAddNewProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(12, 12, 12)
                    .addComponent(cmdDelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(76, 76, 76)
            .addComponent(FieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(109, Short.MAX_VALUE))
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(lblWindowTitle)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtInventorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmdInventorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblBigWindowTitle))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane3))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(lblBigWindowTitle)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblWindowTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtInventorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdInventorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(FieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmdDelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdAddNewProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmdRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(15, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    jTabbedPane1.addTab("Product Inventory", jPanel1);

    jPanel13.setBackground(new java.awt.Color(17, 105, 142));

    lblBigWindowTitle1.setBackground(new java.awt.Color(22, 199, 154));
    lblBigWindowTitle1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
    lblBigWindowTitle1.setForeground(new java.awt.Color(248, 241, 241));
    lblBigWindowTitle1.setText("Akon mga Transaction");

    cmdViewTransaction.setBackground(new java.awt.Color(22, 199, 154));
    cmdViewTransaction.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    cmdViewTransaction.setForeground(new java.awt.Color(17, 105, 142));
    cmdViewTransaction.setText("VIEW TRANSACTION");
    cmdViewTransaction.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdViewTransactionMouseClicked(evt);
        }
    });
    cmdViewTransaction.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdViewTransactionActionPerformed(evt);
        }
    });

    jScrollPane4.setBackground(new java.awt.Color(17, 105, 142));
    jScrollPane4.setForeground(new java.awt.Color(248, 241, 241));
    jScrollPane4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jScrollPane4.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

    transactionTable.setBackground(new java.awt.Color(17, 105, 142));
    transactionTable.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
    transactionTable.setForeground(new java.awt.Color(248, 241, 241));
    transactionTable.setModel(new javax.swing.table.DefaultTableModel(
        null, new String[]{"TransactionID", "BuyerID", "Buyer", "Total"}
    ) {public boolean isCellEditable(int row, int column){return false;}});
    try{
        DefaultTableModel defaulttable= (DefaultTableModel) transactionTable.getModel();
        String UserID = getUserID(User);
        sql = "SELECT * FROM transactiontable WHERE BuyerID =" + getUserID(User);
        Statement statement = Database.myConnect("posdatabase").createStatement();
        ResultSet resultset = statement.executeQuery(sql);

        while(resultset.next()){
            Vector vector = new Vector();
            vector.add(resultset.getString(1));
            vector.add(resultset.getString(2));
            vector.add(resultset.getString(3));
            vector.add(resultset.getString(4));
            defaulttable.addRow(vector);
            transactionTable.setDefaultEditor(Object.class, null);
        }
    }
    catch(Exception e){
        JOptionPane.showMessageDialog(this, e);
    }
    transactionTable.setGridColor(new java.awt.Color(25, 69, 107));
    transactionTable.setSelectionBackground(new java.awt.Color(22, 199, 154));
    transactionTable.setSelectionForeground(new java.awt.Color(25, 69, 107));
    transactionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    transactionTable.setShowGrid(true);
    transactionTable.getTableHeader().setReorderingAllowed(false);
    transactionTable.setUpdateSelectionOnSort(false);
    transactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            transactionTableMouseClicked(evt);
        }
    });
    jScrollPane4.setViewportView(transactionTable);
    transactionTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    jPanel15.setBackground(new java.awt.Color(51, 51, 51));

    lblTransactionsCount.setBackground(new java.awt.Color(0, 31, 84));
    lblTransactionsCount.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    lblTransactionsCount.setForeground(new java.awt.Color(254, 252, 251));
    lblTransactionsCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblTransactionsCount.setText("100");

    lblHeader17.setBackground(new java.awt.Color(0, 31, 84));
    lblHeader17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblHeader17.setForeground(new java.awt.Color(254, 252, 251));
    lblHeader17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblHeader17.setText("Transactions");

    javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
    jPanel15.setLayout(jPanel15Layout);
    jPanel15Layout.setHorizontalGroup(
        jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(lblTransactionsCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel15Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblHeader17, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel15Layout.setVerticalGroup(
        jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel15Layout.createSequentialGroup()
            .addComponent(lblTransactionsCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblHeader17)
            .addContainerGap())
    );

    jPanel6.setBackground(new java.awt.Color(255, 255, 255));

    lblThanks1.setBackground(new java.awt.Color(255, 255, 255));
    lblThanks1.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
    lblThanks1.setForeground(new java.awt.Color(0, 0, 0));
    lblThanks1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblThanks1.setText("OFFICIAL RECEIPT");

    lblTransactionID.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
    lblTransactionID.setForeground(new java.awt.Color(0, 0, 0));
    lblTransactionID.setText("TransactionID:");

    lblBuyer.setBackground(new java.awt.Color(255, 255, 255));
    lblBuyer.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
    lblBuyer.setForeground(new java.awt.Color(0, 0, 0));
    lblBuyer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    lblBuyer.setText("Buyer:");

    lblContactNo.setBackground(new java.awt.Color(255, 255, 255));
    lblContactNo.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
    lblContactNo.setForeground(new java.awt.Color(0, 0, 0));
    lblContactNo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    lblContactNo.setText("Contact No.:");

    lblAddress.setBackground(new java.awt.Color(255, 255, 255));
    lblAddress.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
    lblAddress.setForeground(new java.awt.Color(0, 0, 0));
    lblAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    lblAddress.setText("Address:");

    jScrollPane5.setBackground(new java.awt.Color(255, 255, 255));
    jScrollPane5.setForeground(new java.awt.Color(0, 0, 0));

    sql = "SELECT DISTINCT(TransactionID) FROM transactionlogtable WHERE TransactionID = (SELECT max(TransactionID) FROM transactionlogtable);";
    String lbl = null;
    try{
        PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
        ResultSet resultset = preparedstatement.executeQuery();
        while (resultset.next()) {
            lbl = resultset.getString(1);
        }
        preparedstatement.close();
    }catch(Exception e){
        JOptionPane.showMessageDialog(this, e);
    }
    sql = "SELECT ProductID, SellerID, Seller, Product, Price, Quantity, Subtotal FROM transactionlogtable WHERE TransactionID =" + lbl;
    tblReceipt.setModel(new javax.swing.table.DefaultTableModel(
        null, new String[]{"ProductID", "SellerID","Seller", "Product", "Price", "Quantity", "Subtotal"})
    );
    tblReceipt.setColumnSelectionAllowed(true);
    tblReceipt.setRowSelectionAllowed(false);
    tblReceipt.getTableHeader().setReorderingAllowed(false);
    tblReceipt.setUpdateSelectionOnSort(false);
    jScrollPane5.setViewportView(tblReceipt);

    lblTotalOR.setBackground(new java.awt.Color(255, 255, 255));
    lblTotalOR.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
    lblTotalOR.setForeground(new java.awt.Color(0, 0, 0));
    lblTotalOR.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    lblTotalOR.setText("Total:");

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGap(148, 148, 148)
                            .addComponent(lblThanks1))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblTransactionID, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                                .addComponent(lblAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblBuyer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblContactNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblTotalOR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblThanks1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblTransactionID)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblAddress)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblBuyer)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblContactNo)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblTotalOR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
    jPanel13.setLayout(jPanel13Layout);
    jPanel13Layout.setHorizontalGroup(
        jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel13Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addComponent(lblBigWindowTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(23, 23, 23))))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdViewTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel13Layout.setVerticalGroup(
        jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel13Layout.createSequentialGroup()
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(lblBigWindowTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(12, 12, 12)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(92, 92, 92))
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmdViewTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 14, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Transactions", jPanel4);

    lblWelcome.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
    lblWelcome.setForeground(new java.awt.Color(255, 255, 255));
    lblWelcome.setText("Welcome, " + User + "!");

    lblProgramName.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
    lblProgramName.setForeground(new java.awt.Color(255, 255, 255));
    lblProgramName.setText("sa Tahungan ni Geneva!");

    cmdSettings.setText("User Settings");
    cmdSettings.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmdSettingsMouseClicked(evt);
        }
    });
    cmdSettings.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmdSettingsActionPerformed(evt);
        }
    });

    jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ODB/tahong.png"))); // NOI18N

    javax.swing.GroupLayout pnlBGLayout = new javax.swing.GroupLayout(pnlBG);
    pnlBG.setLayout(pnlBGLayout);
    pnlBGLayout.setHorizontalGroup(
        pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlBGLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlBGLayout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(pnlBGLayout.createSequentialGroup()
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblProgramName, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmdSettings, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addComponent(cmdOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())))
    );
    pnlBGLayout.setVerticalGroup(
        pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlBGLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(pnlBGLayout.createSequentialGroup()
                    .addComponent(cmdSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmdOut, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBGLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(lblProgramName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblWelcome)
                    .addComponent(jLabel2)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(19, 19, 19))
    );

    getContentPane().add(pnlBG, new java.awt.GridBagConstraints());

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public String ProductsSetSelectedRow() {
        String productid = tblProducts.getValueAt(tblProducts.getSelectedRow(), 0).toString();
        return productid;
    }

    public String OrdersSetSelectedRow() {
        String productid = tblOrders.getValueAt(tblOrders.getSelectedRow(), 0).toString();
        return productid;
    }

    public int QuantitySelectedRow() {
        int SelectedQuantity = Integer.parseInt(tblProducts.getValueAt(tblProducts.getSelectedRow(), 5).toString());
        return SelectedQuantity;
    }

    public int ComputeTotal() {
        int total = 0;
        for (int x = 0; x < tblOrders.getRowCount(); x++) {
            int subtotal = Integer.parseInt(tblOrders.getValueAt(x, 7).toString());
            total += subtotal;
        }
        return total;
    }

    public int SubtractFromTotal() {
        int total = Integer.parseInt(lblTotal.getText());
        int subtotal = Integer.parseInt(tblOrders.getValueAt(tblOrders.getSelectedRow(), 7).toString());
        total -= subtotal;
        return total;
    }

    public String User = getActiveUser();

    public String getActiveUser() {
        String Usersql = null;
        try {
            String sql = "SELECT * FROM currentactive;";

            Statement statement = Database.myConnect("posdatabase").createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Usersql = resultset.getString(1);
                return Usersql;
            }
            resultset.close();
            statement.close();
        } catch (Exception e) {
            return null;
        }
        return Usersql;
    }


    private void cmdOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdOutMouseClicked
        // TODO add your handling code here:
        int cmdOut = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel transaction?", "EXIT", JOptionPane.YES_NO_OPTION);
        switch (cmdOut) {
            case JOptionPane.YES_OPTION:
                JOptionPane.showMessageDialog(this, "Thank you for choosing transaction.");
                login log = new login();
                log.setVisible(rootPaneCheckingEnabled);
                this.dispose();
            case JOptionPane.NO_OPTION:
        }
    }//GEN-LAST:event_cmdOutMouseClicked

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed

    }//GEN-LAST:event_txtSearchKeyPressed

    public String getNameOfUser(String userid) {
        String sql = "SELECT Username FROM usertable WHERE UserID = ?";
        int SellerID = Integer.parseInt(userid);
        String user;
        try {
            PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
            preparedstatement.setInt(1, SellerID);
            ResultSet resultset = preparedstatement.executeQuery();
            if (resultset.next()) {
                user = resultset.getString(1);
                return user;
            }
            resultset.close();
            preparedstatement.close();
        } catch (Exception e) {
        }
        return null;
    }

    public String getUserID(String user) {
        String sql = "SELECT UserID FROM usertable WHERE Username = ?";
        String Username = user;
        String UserID = null;
        try {
            PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
            preparedstatement.setString(1, Username);
            ResultSet resultset = preparedstatement.executeQuery();
            if (resultset.next()) {
                UserID = resultset.getString(1);
            }
            preparedstatement.close();
            resultset.close();

        } catch (Exception e) {
            return null;
        }
        return UserID;
    }

    public String getTransactionID() {

        String TransactionID = null;
        try {
            String sql = "SELECT TransactionID FROM transactiontable WHERE TransactionID =(SELECT max(TransactionID) FROM transactiontable);";
            PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
            ResultSet resultset = preparedstatement.executeQuery();
            while (resultset.next()) {
                TransactionID = resultset.getString(1);
               
            }
            preparedstatement.close();
            resultset.close();
        } catch (Exception e) {

        }
        return TransactionID;
    }

    private void cmdBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuyActionPerformed

        String sql = "INSERT INTO transactiontable (BuyerID, Buyer, Total) VALUES (?, ?, ?);";
        PreparedStatement preparedstatement;
        if (tblOrders.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Orders are empty. Please select a product to order.");
        } else {
            try {
                preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);

                String Buyer = User;
                String BuyerID = getUserID(User);

                int Total = 0;

                for (int x = 0; x < tblOrders.getRowCount(); x++) {
                    int Subtotal = (Integer) tblOrders.getValueAt(x, 6);
                    Total += Subtotal;;
                }

                preparedstatement.setString(1, BuyerID);
                preparedstatement.setString(2, Buyer);
                preparedstatement.setString(3, String.valueOf(Total));
                preparedstatement.executeUpdate();
                preparedstatement.close();

            } catch (Exception e) {
            }

            for (int x = 0; x < tblOrders.getRowCount(); x++) {
                sql = "INSERT INTO transactionlogtable (TransactionID, ProductID, Product, SellerID, Seller, BuyerID, Buyer, Price, Quantity, SubTotal) Values(?,?,?,?,?,?,?,?,?,?)";
                try {
                    preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
                    String ProductID = String.valueOf(tblOrders.getValueAt(x, 0));
                    String Product = String.valueOf(tblOrders.getValueAt(x, 2));
                    String SellerID = String.valueOf(tblOrders.getValueAt(x, 1));
                    String Seller = getNameOfUser(SellerID);
                    String Buyer = User;
                    String BuyerID = getUserID(User);
                    String Price = String.valueOf(tblOrders.getValueAt(x, 5));
                    String Stock_Quantity = String.valueOf(tblOrders.getValueAt(x, 6));
                    String Subtotal = String.valueOf(tblOrders.getValueAt(x, 7));

                    preparedstatement.setString(1, getTransactionID());
                    preparedstatement.setString(2, ProductID);
                    preparedstatement.setString(3, Product);
                    preparedstatement.setString(4, SellerID);
                    preparedstatement.setString(5, Seller);
                    preparedstatement.setString(6, BuyerID);
                    preparedstatement.setString(7, Buyer);
                    preparedstatement.setString(8, Price);
                    preparedstatement.setString(9, Stock_Quantity);
                    preparedstatement.setString(10, Subtotal);

                    preparedstatement.executeUpdate();

                    JOptionPane.showMessageDialog(this, "Product Added", "Prompt", JOptionPane.PLAIN_MESSAGE);
                    preparedstatement.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }

            for (int x = 0; x < tblOrders.getRowCount(); x++) {
                try {
                    String Stock_Quantity = String.valueOf(tblOrders.getValueAt(x, 6));
                    String ProductID = String.valueOf(tblOrders.getValueAt(x, 0));
                    sql = "UPDATE producttable SET Stock = Stock - " + Stock_Quantity + " WHERE ProductID = " + ProductID;
                    preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
                    preparedstatement.executeUpdate();
                    preparedstatement.close();
                } catch (Exception e) {
                }
                
            }
            ordered.clear();
            resetBuyTable();
            resetInventoryTable();
            Receipt resibo = new Receipt();
            resibo.setVisible(rootPaneCheckingEnabled);
        }
    }//GEN-LAST:event_cmdBuyActionPerformed

    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        String getSearch = txtSearch.getText();
        counter();
        String sql = ("SELECT * FROM producttable WHERE Product LIKE '%" + getSearch + "%'");

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
                null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Stock"})
        );
        try {
            DefaultTableModel defaulttable = (DefaultTableModel) tblProducts.getModel();
            Statement statement = Database.myConnect("posdatabase").createStatement();
            ResultSet resultset = statement.executeQuery(sql);
           
            while (resultset.next()) {
                Vector vector = new Vector();
                vector.add(resultset.getString(1));
                vector.add(resultset.getString(2));
                vector.add(resultset.getString(3));
                vector.add(resultset.getString(4));
                vector.add(resultset.getString(5));
                vector.add(resultset.getString(6));
                vector.add(resultset.getString(7));
                defaulttable.addRow(vector);
                tblProducts.setDefaultEditor(Object.class, null);
            }
            resultset.close();
            statement.close();
           
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }//GEN-LAST:event_cmdSearchActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
            String selectedproductID = (String) tblProducts.getValueAt(tblProducts.getSelectedRow(), 0);
            // get selected row index

            int option = JOptionPane.showConfirmDialog(this, "Are you sure that you want to remove this from your Orders?",
                    "Delete Product", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (option == JOptionPane.YES_OPTION) {
                lblTotal.setText(String.valueOf(SubtractFromTotal()));
                model.removeRow(tblOrders.getSelectedRow());
                ordered.removeElement(selectedproductID);
                JOptionPane.showMessageDialog(null, "Product Removed from orders.");
            } else if (option == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Cancelled");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a product from your orders.");
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        try {
            javax.swing.SpinnerNumberModel sModel = new javax.swing.SpinnerNumberModel(1, 1, QuantitySelectedRow(), 1);
            javax.swing.JSpinner spinner = new javax.swing.JSpinner(sModel);
            String selectedproductID = (String) tblProducts.getValueAt(tblProducts.getSelectedRow(), 0);
            String currentstock = (String) tblProducts.getValueAt(tblProducts.getSelectedRow(), 6);
            if (tblProducts.getSelectedRow() < 0) {
                JOptionPane.showMessageDialog(this, "No product selected!");
            } else {
                if (ordered.contains(selectedproductID)) {
                    JOptionPane.showMessageDialog(this, "Already in Orders!");
                } else if (currentstock.equals("0")) {
                    JOptionPane.showMessageDialog(this, "No Stock Available.");
                } else {
                    int option = JOptionPane.showOptionDialog(null, spinner,
                            "Please Enter Quantity", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, null, null);
                    if (option == JOptionPane.CANCEL_OPTION) {
                        JOptionPane.showMessageDialog(this, "Cancelled Successfully!");
                    } else if (option == JOptionPane.OK_OPTION) {
                        int spinnervalue = (Integer) spinner.getValue();

                        if (spinnervalue == 0 || spinnervalue > Integer.parseInt(currentstock)) {
                            JOptionPane.showMessageDialog(this, "Please input valid quantity.");
                        } else {
                            DefaultTableModel defaulttable = (DefaultTableModel) tblOrders.getModel();
                            int price = Integer.parseInt(tblProducts.getValueAt(tblProducts.getSelectedRow(), 5).toString());
                            int quantity = (int) spinner.getValue();
                            int subtotal = price * quantity;

                            Vector vector = new Vector();
                            vector.add(tblProducts.getValueAt(tblProducts.getSelectedRow(), 0));
                            vector.add(tblProducts.getValueAt(tblProducts.getSelectedRow(), 1));
                            vector.add(tblProducts.getValueAt(tblProducts.getSelectedRow(), 2));
                            vector.add(tblProducts.getValueAt(tblProducts.getSelectedRow(), 3));
                            vector.add(tblProducts.getValueAt(tblProducts.getSelectedRow(), 4));
                            vector.add(tblProducts.getValueAt(tblProducts.getSelectedRow(), 5));
                            vector.add(spinner.getValue());
                            vector.add(subtotal);
                            defaulttable.addRow(vector);
                            System.out.println("ambot");
                            tblOrders.setDefaultEditor(Object.class, null);
                            lblTotal.setText(String.valueOf(ComputeTotal()));

                            ordered.add(selectedproductID);
                            JOptionPane.showMessageDialog(this, "Added to Orders!");
                        }

                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a product.");
        }
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdOutActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked

    }//GEN-LAST:event_productTableMouseClicked

    private void cmdUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdUpdateMouseClicked

    }//GEN-LAST:event_cmdUpdateMouseClicked

    String state;
    private void cmdUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUpdateActionPerformed
        state = "Update";
        try {
            if (setselectedrow() == "0") {
                JOptionPane.showMessageDialog(this, "Please select a product.", "No selected product", JOptionPane.ERROR_MESSAGE);
            } else {
                FieldsPanel.setVisible(true);
                cmdUpdate.setEnabled(false);
                cmdAddNewProduct.setEnabled(true);
                lblRestock.setText("Restock:");

                try {
                    //System.out.println(setselectedvalue());
                    Statement statement = Database.myConnect("posdatabase").createStatement();
                    ResultSet resultset = statement.executeQuery("SELECT Product, Type, Price FROM producttable WHERE productID =" + setselectedrow());

                    if (resultset.next()) {

                        String Product = resultset.getString("Product");
                        String Type = resultset.getString("Type");
                        String Price = resultset.getString("Price");
                        

                        txtProductName.setText(Product);
                        txtProductType.setText(Type);
                        txtPrice.setText(Price);
                    }
                    resultset.close();
                    statement.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a product.");
        }
    }//GEN-LAST:event_cmdUpdateActionPerformed

    private void cmdDelete1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdDelete1MouseClicked

    }//GEN-LAST:event_cmdDelete1MouseClicked

    private void cmdDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelete1ActionPerformed

        try {
            String sql = "DELETE FROM producttable WHERE ProductID = " + setselectedrow();
            int option = JOptionPane.showConfirmDialog(this, "Are you sure that you want to delete this product?",
                    "Delete Product", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (option == JOptionPane.YES_OPTION) {
                PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
                preparedstatement.executeUpdate();

                JOptionPane.showMessageDialog(null, "Product Deleted.");
                preparedstatement.close();
            } else if (option == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Deletion Cancelled");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a product.");
        }
        resetInventoryTable();
    }//GEN-LAST:event_cmdDelete1ActionPerformed

    private void cmdRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdRefreshMouseClicked

    }//GEN-LAST:event_cmdRefreshMouseClicked

    public void setUsername(String Username) {
        User = Username;
    }

    public void resetBuyTable() {
        String sql = "SELECT * FROM producttable";
        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
                null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Stock"})
        );
        try {
            DefaultTableModel defaulttable = (DefaultTableModel) tblProducts.getModel();

            Statement statement = Database.myConnect("posdatabase").createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Vector vector = new Vector();
                vector.add(resultset.getString(1));
                vector.add(resultset.getString(2));
                vector.add(resultset.getString(3));
                vector.add(resultset.getString(4));
                vector.add(resultset.getString(5));
                vector.add(resultset.getString(6));
                vector.add(resultset.getString(7));
                defaulttable.addRow(vector);
                tblProducts.setDefaultEditor(Object.class, null);
            }
            statement.close();
            resultset.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }

    public void resetInventoryTable() {
        productTable.setModel(new javax.swing.table.DefaultTableModel(
                null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Stock"}
        ) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        try {
            DefaultTableModel defaulttable = (DefaultTableModel) productTable.getModel();
            String UserID = getUserID(User);
            String sql = "SELECT * FROM producttable WHERE SellerID = " + UserID;
            Statement statement = Database.myConnect("posdatabase").createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Vector vector = new Vector();
                vector.add(resultset.getString(1));
                vector.add(resultset.getString(2));
                vector.add(resultset.getString(3));
                vector.add(resultset.getString(4));
                vector.add(resultset.getString(5));
                vector.add(resultset.getString(6));
                vector.add(resultset.getString(7));
                defaulttable.addRow(vector);
                productTable.setDefaultEditor(Object.class, null);
            }
            statement.close();
            resultset.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }
    private void cmdRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRefreshActionPerformed
        resetInventoryTable();
    }//GEN-LAST:event_cmdRefreshActionPerformed

    private void cmdCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdCancelMouseClicked


    }//GEN-LAST:event_cmdCancelMouseClicked

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed

        FieldsPanel.setVisible(false);
        cmdAddNewProduct.setEnabled(true);
        cmdUpdate.setEnabled(true);
        txtProductName.setText("");
        txtProductType.setText("");
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdAddNewProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdAddNewProductMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdAddNewProductMouseClicked

    private void cmdAddNewProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddNewProductActionPerformed
        state = "Add";
        FieldsPanel.setVisible(true);
        cmdUpdate.setEnabled(true);
        cmdAddNewProduct.setEnabled(false);
        txtProductName.setText("");
        txtProductType.setText("");
        lblRestock.setText("Stocks:");

    }//GEN-LAST:event_cmdAddNewProductActionPerformed

    private void txtProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductNameActionPerformed

    private void cmdDoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdDoneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdDoneMouseClicked

    private void cmdDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDoneActionPerformed

        if ("Update".equals(state)) {
                String sql = "UPDATE producttable SET Product = ?, Type = ?, Price =?, Stock = Stock + ? WHERE ProductID = " + productTable.getValueAt(productTable.getSelectedRow(), 0);
          
            try {
                PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);

                String product = txtProductName.getText();
                
                String type = txtProductType.getText();
                
                String price = txtPrice.getText();
                
                String stock = String.valueOf(spinStocks.getValue());
                System.out.println(productTable.getValueAt(productTable.getSelectedRow(), 0));
                System.out.println(product);
                System.out.println(type);
                System.out.println(price);
                System.out.println(stock);
                
                preparedstatement.setString(1, product);
                preparedstatement.setString(2, type);
                preparedstatement.setString(3, price);
                preparedstatement.setString(4, stock);

                preparedstatement.executeUpdate();
                preparedstatement.close();
                
                JOptionPane.showMessageDialog(this, "Product Updated.", "Prompt", JOptionPane.PLAIN_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
            FieldsPanel.setVisible(false);
            cmdUpdate.setEnabled(true);
            txtProductName.setText("");
            txtProductType.setText("");
            txtPrice.setText("");
            spinStocks.setValue(0);
        } else if ("Add".equals(state)) {
            String sql = "INSERT INTO producttable (SellerID, Seller, Product, Type, Price, Stock) Values(?, ?, ?, ?, ?, ?)";
            login Login = new login();
            try {
                PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
                String SellerID = getUserID(User);
                String Seller = User;
                String product = txtProductName.getText();
                String type = txtProductType.getText();
                String price = txtPrice.getText();
                String stock = String.valueOf(spinStocks.getValue());

                preparedstatement.setString(1, SellerID);
                preparedstatement.setString(2, Seller);
                preparedstatement.setString(3, product);
                preparedstatement.setString(4, type);
                preparedstatement.setString(5, price);
                preparedstatement.setString(6, stock);

                preparedstatement.executeUpdate();
              

                JOptionPane.showMessageDialog(this, "Product Added", "Prompt", JOptionPane.PLAIN_MESSAGE);
                preparedstatement.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }

            FieldsPanel.setVisible(false);
            cmdAddNewProduct.setEnabled(true);
            cmdUpdate.setEnabled(true);
            txtProductName.setText("");
            txtProductType.setText("");
            txtPrice.setText("");
            spinStocks.setValue(0);

        }
        resetInventoryTable();
        resetBuyTable();
    }//GEN-LAST:event_cmdDoneActionPerformed

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void txtInventorySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInventorySearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInventorySearchActionPerformed

    private void txtInventorySearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInventorySearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInventorySearchKeyPressed

    private void cmdInventorySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInventorySearchActionPerformed
        // TODO add your handling code here:

        productTable.setModel(new javax.swing.table.DefaultTableModel(
                null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Type", "Price", "Stock"}
        ) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        try {
            DefaultTableModel defaulttable = (DefaultTableModel) productTable.getModel();
            String getSearch = txtInventorySearch.getText();
            String sql = ("SELECT * FROM producttable WHERE Product LIKE '%" + getSearch + "%' AND SellerID = " + getUserID(User));
            Statement statement = Database.myConnect("posdatabase").createStatement();
            ResultSet resultset = statement.executeQuery(sql);

            while (resultset.next()) {
                Vector vector = new Vector();
                vector.add(resultset.getString(1));
                vector.add(resultset.getString(2));
                vector.add(resultset.getString(3));
                vector.add(resultset.getString(4));
                vector.add(resultset.getString(5));
                vector.add(resultset.getString(6));
                vector.add(resultset.getString(7));
                defaulttable.addRow(vector);
                productTable.setDefaultEditor(Object.class, null);
            }
            resultset.close();
            statement.close();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        } 
    }//GEN-LAST:event_cmdInventorySearchActionPerformed

    private void cmdViewTransactionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdViewTransactionMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdViewTransactionMouseClicked

    private void cmdViewTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewTransactionActionPerformed
        try {
            if (transactionsetselectedrow() == "0") {
                JOptionPane.showMessageDialog(this, "Please select a product.", "No selected product", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    //System.out.println(setselectedvalue());
                    Statement statement = Database.myConnect("posdatabase").createStatement();
                    ResultSet resultset = statement.executeQuery("SELECT * FROM transactionlogtable WHERE transactionID =" + transactionsetselectedrow());

                    if (resultset.next()) {
//TransactionID	ProductID	SellerID	Seller	BuyerID	Buyer	Product	Price	Quantity	Subtotal
                        String TransactionID = resultset.getString("TransactionID");
                        String Buyer = resultset.getString("Buyer");
                        lblTransactionID.setText("TransactionID:" + TransactionID);
                        lblBuyer.setText("Buyer: " + Buyer);
                    }
                    statement.close();
                    resultset.close();
                        int Total = 0;
                        String sql = "SELECT Subtotal FROM transactionlogtable WHERE TransactionID =" + transactionsetselectedrow();
                        System.out.println(transactionsetselectedrow());
                        PreparedStatement preparedstatement = Database.myConnect("posdatabase").prepareStatement(sql);
                        resultset = preparedstatement.executeQuery();
                        
                        while (resultset.next()) {
                            Total += Integer.parseInt(resultset.getString(1));
                        }
                        lblTotalOR.setText("Total:" + Total);
                        preparedstatement.close();
                        resultset.close();
                        tblReceipt.setModel(new javax.swing.table.DefaultTableModel(
                                null, new String[]{"ProductID", "SellerID", "Seller", "Product", "Price", "Quantity", "Subtotal"})
                        );
                        sql = "SELECT ProductID, SellerID, Seller, Product, Price, Quantity, Subtotal FROM transactionlogtable WHERE TransactionID =" + transactionsetselectedrow();
                        
                        try {
                            DefaultTableModel defaulttable = (DefaultTableModel) tblReceipt.getModel();

                            statement = Database.myConnect("posdatabase").createStatement();
                            resultset = statement.executeQuery(sql);

                            while (resultset.next()) {
                                Vector vector = new Vector();
                                vector.add(resultset.getString(1));
                                vector.add(resultset.getString(2));
                                vector.add(resultset.getString(3));
                                vector.add(resultset.getString(4));
                                vector.add(resultset.getString(5));
                                vector.add(resultset.getString(6));
                                vector.add(resultset.getString(7));
                                defaulttable.addRow(vector);
                                tblReceipt.setDefaultEditor(Object.class, null);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this, e);
                        }
                        resultset.close();
                        statement.close();
                        
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a product.");
        }
    }//GEN-LAST:event_cmdViewTransactionActionPerformed

    private void transactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transactionTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_transactionTableMouseClicked

    
    
    private void cmdSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdSettingsMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmdSettingsMouseClicked

    private void cmdSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSettingsActionPerformed
            showProfile set = new showProfile();
            set.setVisible(rootPaneCheckingEnabled);
            this.hide();
    }//GEN-LAST:event_cmdSettingsActionPerformed

    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mainmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mainmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mainmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mainmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mainmenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FieldsPanel;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdAddNewProduct;
    private javax.swing.JButton cmdBuy;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDelete1;
    private javax.swing.JButton cmdDone;
    private javax.swing.JButton cmdInventorySearch;
    private javax.swing.JButton cmdOut;
    private javax.swing.JButton cmdRefresh;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JButton cmdSettings;
    private javax.swing.JButton cmdUpdate;
    private javax.swing.JButton cmdViewTransaction;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblBigWindowTitle;
    private javax.swing.JLabel lblBigWindowTitle1;
    private javax.swing.JLabel lblBuyer;
    private javax.swing.JLabel lblContactNo;
    private javax.swing.JLabel lblCountProducts;
    private javax.swing.JLabel lblCountTypes;
    private javax.swing.JLabel lblCountUserProducts;
    private javax.swing.JLabel lblCountUserTypes;
    private javax.swing.JLabel lblHeader1;
    private javax.swing.JLabel lblHeader10;
    private javax.swing.JLabel lblHeader11;
    private javax.swing.JLabel lblHeader13;
    private javax.swing.JLabel lblHeader15;
    private javax.swing.JLabel lblHeader17;
    private javax.swing.JLabel lblHeader2;
    private javax.swing.JLabel lblHeader3;
    private javax.swing.JLabel lblHeader8;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JLabel lblProgramName;
    private javax.swing.JLabel lblRestock;
    private javax.swing.JLabel lblSellers;
    private javax.swing.JLabel lblThanks1;
    public javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalOR;
    private javax.swing.JLabel lblTotalname;
    private javax.swing.JLabel lblTransactionID;
    private javax.swing.JLabel lblTransactionsCount;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JLabel lblWindowTitle;
    private javax.swing.JPanel pnlBG;
    private javax.swing.JPanel pnlTablebg;
    public javax.swing.JTable productTable;
    private javax.swing.JSpinner spinStocks;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTable tblReceipt;
    public javax.swing.JTable transactionTable;
    private javax.swing.JTextField txtInventorySearch;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtProductType;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}